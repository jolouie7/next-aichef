generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables for OAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String? // Optional for OAuth users
  profilePicture String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  meals          Meal[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meal {
  id           String           @id @default(cuid())
  name         String
  description  String
  mealPicture  String?
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  ingredients  MealIngredient[]
  instructions Instruction[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Ingredient {
  id        String           @id @default(cuid())
  name      String           @unique
  meals     MealIngredient[]
  createdAt DateTime         @default(now())
}

model MealIngredient {
  id           String     @id @default(cuid())
  mealId       String
  meal         Meal       @relation(fields: [mealId], references: [id], onDelete: Cascade)
  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  amount       Float?
  measurement  String?
  createdAt    DateTime   @default(now())
}

model Instruction {
  id          String   @id @default(cuid())
  mealId      String
  meal        Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  totalSteps  Int
  description String
  createdAt   DateTime @default(now())
}
